cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Archival Items),
		labelSingular = _("archival item"),
 		labelPlural = _("archival items"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 18,
				display = {
					labelTemplate = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					contentTemplate = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div><p>^ca_objects.description</p>
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Name = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [relationshipType],
			selectMediaUsingTypes = [objectType],
			extendedInformationTemplate = ^ca_objects.description
		}    
	},
	archival_collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [collection],
		dontExpandTypesHierarchically = true,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {},
			list = {},
			map = {}
		},
		
		sortBy = {
			Title = ca_collection_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		facetGroup = archival_collections
		options = {
			extendedInformationTemplate = ^ca_collections.description
		}  
	},
	collections = {
		displayName = _(Projects),
		labelSingular = _("project"),
 		labelPlural = _("projects"),
		table = ca_collections,
		restrictToTypes = [project],
		dontExpandTypesHierarchically = true,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {},
			list = {}
		},
		
		sortBy = {
			Identifier = ca_collections.idno,
			Title = ca_collection_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			extendedInformationTemplate = ^ca_collections.description
		}
	}
	participants = {
		displayName = _("Participants"),
		labelSingular = _("participant"),
 		labelPlural = _("participants"),
		table = ca_entities,
		restrictToTypes = [],
		baseCriteria = {
			category_facet = [participant],
		}
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Name = ca_entity_labels.displayname
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
			extendedInformationTemplate = ^ca_entities.biographist		
		},
	}
	places = {
		displayName = _("Places"),
		labelSingular = _("place"),
 		labelPlural = _("places"),
		table = ca_places,
		restrictToTypes = [],
		baseCriteria = {
			category_facet = [],
		}
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.displayname
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
			listResultTextTemplate = "^ca_places.preferred_labels.displayname"			
		},
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		has_external_url = {
			type = has,
			
			table = ca_objects,
			element_code = ca_objects.url,
			#relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has digitized media"),
			label_no = _("Does not have digitized media"),
			
			single_value = 1,
			
			label_singular = _("Only items with digitized media"),
			label_plural = _("Only items with digitized media")
		},
		media_class = {
			type = field,
			field = media_class,
			
			group_mode = none,
			relative_to = ca_object_representations,
			label_singular = _("Media Type"),
			label_plural = _("Media Type")
		},
		material_type_facet = {
			type = attribute,
			element_code = material_type,

			multiple = 1,
			
			group_mode = none,

			label_singular = _("Material Type"),
			label_plural = _("Material Type")
		},
		term_facet = {
				type = authority,
				table = ca_list_items,
				relationship_table = ca_objects_x_vocabulary_terms,
				restrict_to_types = [],
				restrict_to_relationship_types = [resource_type],
				sort_by = [name],
				group_mode = alphabetical,

				indefinite_article = a,
				label_singular = _(Resource Type),
				label_plural = _(Resource Types)
		},
		terms_facet = {
				type = authority,
				table = ca_list_items,
				relationship_table = ca_objects_x_vocabulary_terms,
				restrict_to_types = [],
				restrict_to_relationship_types = [keyword],
				sort_by = [name],
				group_mode = alphabetical,

				indefinite_article = a,
				label_singular = _(Keyword),
				label_plural = _(Keywords)
		},
		decade_facet = {
			type = normalizedDates,
			element_code = dacs_date_value,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades"),
		},
		year_facet = {
			type = normalizedDates,
			element_code = dacs_date_value,
			normalization = years,
			requires = decade,
			
			group_mode = none,
			
			label_singular = _("Year"),
			label_plural = _("Years"),
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [project],
			
			group_mode = none,

			label_singular = _("Project"),
			label_plural = _("Projects")
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("place"),
			label_plural = _("places")
		},	
		entity_ind_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [ind],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [displayname],
			
			indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People"),
		},
		LcshGenre_facet = {
			type = attribute,
			element_code = LcshGenre,
			
			group_mode = none,

			label_singular = _("Genre (LOC)"),
			label_plural = _("Genres (LOC)")
		},
		attGenre_facet = {
			type = attribute,
			element_code = aat,
			
			group_mode = none,

			label_singular = _("Genre (AAT)"),
			label_plural = _("Genres (AAT)")
		},
		has_external_url = {
			type = has,
			
			table = ca_objects,
			element_code = ca_objects.url,
			#relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has digitized media"),
			label_no = _("Does not have digitized media"),
			
			single_value = 1,
			
			label_singular = _("Only items with digitized media"),
			label_plural = _("Only items with digitized media")
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("Only items with media"),
			label_plural = _("Only items with media")
		}
		
	}
}

ca_collections = {
	name = _("Collections"),
	facets = {		
		has_media_facet = {
			type = has,
			
			table = ca_objects_x_collections,
			relationship_table = ca_collections_x_ca_objects,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has resources"),
			label_no = _("Does not have resources"),
			
			single_value = 1,
			
			label_singular = _("Projects with resources"),
			label_plural = _("Projects with resources")
		}
		entity_all_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [archival_collections],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [displayname],
			
			indefinite_article = an,
			label_singular = _("Participant"),
			label_plural = _("Participants"),
			facet_groups = []
		},
		decade_facet = {
			type = normalizedDates,
			element_code = dacs_date_value,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades"),
			facet_groups = [allcollections, archival_collections]
		},
		year_facet = {
			type = normalizedDates,
			element_code = dacs_date_value,
			normalization = years,
			requires = decade,
			
			group_mode = none,
			
			label_singular = _("Year"),
			label_plural = _("Years"),
			facet_groups = [allcollections, archival_collections]
		},
		material_facet = {
			type = attribute,
			element_code = medium,
			
			group_mode = none,
			
			label_singular = _("medium"),
			label_plural = _("medium"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		term_facet_type = {
                        type = authority,
                        table = ca_list_items,
                        relationship_table = ca_collections_x_vocabulary_terms,
                        restrict_to_types = [],
                        restrict_to_relationship_types = [prjtype],
                        sort_by = [name],
                        group_mode = alphabetical,

                        indefinite_article = a,
                        label_singular = _(Project Type),
                        label_plural = _(Project Types)
                },
						term_facet_region = {
                        type = authority,
                        table = ca_list_items,
                        relationship_table = ca_collections_x_vocabulary_terms,
                        restrict_to_types = [],
                        restrict_to_relationship_types = [prjregion],
                        sort_by = [name],
                        group_mode = alphabetical,

                        indefinite_article = a,
                        label_singular = _(Project Region),
                        label_plural = _(Project Regions)
                },
						term_facet_keyword = {
                        type = authority,
                        table = ca_list_items,
                        relationship_table = ca_collections_x_vocabulary_terms,
                        restrict_to_types = [],
                        restrict_to_relationship_types = [keyword],
                        sort_by = [name],
                        group_mode = alphabetical,

                        indefinite_article = a,
                        label_singular = _(Keyword),
                        label_plural = _(Keywords)
                },
	}
}

# configuration for entities
ca_entities = {
	name = _("Participants"),
	facets = {
 
				collection_facet = {
                        type = authority,
                        table = ca_collections,
                        relationship_table = ca_entities_x_collections,
                        restrict_to_types = [],
                        restrict_to_relationship_types = [],
                        sort_by = [name],
                        group_mode = alphabetical,

                        indefinite_article = a,
                        label_singular = _("project"),
                        label_plural = _("projects")
                },
				type_facet = {
                        type = fieldList,
                        field = type_id,
                        sort_by = [name],
                        group_mode = alphabetical,

                        indefinite_article = a,
                        label_singular = _(Participant Type),
                        label_plural = _(Participant Types)
                },
	}
}
